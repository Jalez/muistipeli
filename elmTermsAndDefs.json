{
  "Model": "The state of your application",
  "View": "A way to turn your state into HTML",
  "Update": "A way to update your state based on messages",
  "declarative": "A way to describe what you want to do, not how to do it",
  "unidirectional data flow": "A way to describe how data flows through your application (one direction)",
  "pure functions": "A function that always returns the same output for the same input",
  "immutability": "The inability to change the state of a variable",
  "side effects": "A function that changes the state of something outside of itself",
  "type inference": "The ability to infer the type of a variable based on its value",
  "type annotation": "A way to explicitly tell the compiler the type of a variable",
  "runtime errors": "An error that occurs when your program is running",
  "elm init": "A command to create a new Elm project",
  "elm reactor": "A command to start a local server to run your Elm project",
  "elm make": "A command to compile your Elm project into JavaScript",
  "elm install": "A command to install a package from the Elm package repository",
  "elm repl": "A command to start a REPL (Read-Eval-Print-Loop) to interact with your Elm project",
  "elm --help": "A command to see all the commands available in Elm",
  "elm make --help": "A command to see all the options available for the elm make command",
  "Structured type: LIST": "immutable data structure sequence of elements. Represented with square brackets and their elements are separated by commas. For example: [1, 2, 3, 4].",
  "Structured type: TUPLE": "a fixed-size collection of elements, where each element can be of a different type. Represented with parentheses and their elements are separated by commas. For example: (1, \"a\", True).",
  "Structured type: RECORD": "a data type in Elm that represents a fixed set of named fields, where each field has a specific type. Similar to objects in other programming languages (such as javascript), and can be used to store data about a particular entity or data structure. For example: { name = \"John\", age = 42, height = 1.75 }.",
  "Structured type: UNION": "a data type in Elm that can have one of several possible values, each of which is of a different type.  Defined using the type keyword in Elm, and are often used to represent a value that can take on several different forms. For example: type Color = Red | Green | Blue.",
  "Structured type: ARRAY": "mutable data structure that stores a sequence of elements. Represented with curly braces and their elements are separated by commas. For example: {1, 2, 3, 4}. More efficient for reading and writing at a specific index, less efficient for adding and removing elements from the beginning or end of the data structure. ",
  "Structured type: DICTIONARY": "(also known as a map or associative array) is a mutable data structure in Elm that stores a set of key-value pairs, where the keys are used to look up the corresponding values. Does not have a fixed set of keys, which means you can store values with any key in this data structure. Implemented as hash maps, which means that they are efficient for looking up values by key, but are not ordered. Dictionaries are represented with a list of key-value pairs enclosed in curly braces and separated by commas. For example: {\"a\" => 1, \"b\" => 2, \"c\" => 3}.",
  "import Html exposing (text)": "A way to import a function from a module",
  "import Html": "A way to import all the functions from a module",
  "curried function": "A function that takes multiple arguments one at a time",
  "partial application": "A way to apply some of the arguments to a function"
}